version: '3.8'

# default configs
x-default:
  &default
  deploy:
    resources:
      limits:
        memory: 16m # defaulted memory limit to 16mb
  restart: unless-stopped

x-deps:
  &deps
  deploy:
    resources:
      limits:
        memory: 256m # defaulted memory limit to 256mb
  restart: unless-stopped

services:
  postgres:
    <<: *deps
    image: 'bitnami/postgresql:latest'
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: replicator
      POSTGRESQL_REPLICATION_PASSWORD: replicator
      POSTGRES_DB: credit
      POSTGRES_USER: local
      POSTGRES_PASSWORD: local
      POSTGRESQL_WORK_MEM: 64MB
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U local"]
      interval: 1s
      timeout: 5s
      retries: 5
  
  postgres-slave:
    <<: *deps
    image: 'bitnami/postgresql:latest'
    container_name: postgres-slave
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5433:5432"
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: replicator
      POSTGRESQL_REPLICATION_PASSWORD: replicator
      POSTGRES_DB: credit
      POSTGRES_USER: local
      POSTGRES_PASSWORD: local
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
      POSTGRESQL_MASTER_USER: local
      POSTGRESQL_MASTER_PASSWORD: local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U local"]
  
  redis:
    <<: *deps
    image: redis:6.2-alpine
    container_name: redis
    command: redis-server --requirepass local
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]

  app-go:
    <<: *default
    build:
      context: ./app-go
    x-develop:
      watch:
        - action: rebuild
          path: ./app-go
    image: credits-app-go:local
    container_name: app-go 
    command: /app-go serve
    depends_on:
      postgres:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports: 
      - 80:80
    environment:
      DB_CONN: host=postgres user=local password=local dbname=credit port=5432 sslmode=disable
      SLAVE_DB_CONN: host=postgres-slave user=local password=local dbname=credit port=5432 sslmode=disable
      REDIS_URI: redis://:local@redis:6379/0
    healthcheck:
      test: [ "CMD", "/wget", "--quiet", "--output-document=-", "http://0.0.0.0:80/health" ]

  app-go-worker:
    <<: *default
    build:
      context: ./app-go
    x-develop:
      watch:
        - action: rebuild
          path: ./app-go
    image: credits-app-go:local
    container_name: app-go-worker 
    command: /app-go work
    depends_on:
      postgres:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_CONN: host=postgres user=local password=local dbname=credit port=5432 sslmode=disable
      SLAVE_DB_CONN: host=postgres-slave user=local password=local dbname=credit port=5432 sslmode=disable
      REDIS_URI: redis://:local@redis:6379/0
    deploy:
      resources:
        limits:
          memory: 32m # override memory limit, otherwise app-go-worker will ate more cpu
 
  load-test:
    <<: *deps
    build:
      context: ./load-test
    image: credits-load-test:local
    container_name: load-test
    command: run create-transaction.ts
    depends_on:
      app-go:
        condition: service_healthy
    network_mode: host
    restart: no
    environment:
      - API_HOST=http://localhost

  asynq-mon:
    <<: *default
    container_name: asynq-mon
    image: hibiken/asynqmon
    platform: linux/amd64
    ports:
      - "7001:8080"
    environment:
      - REDIS_URL=redis://:local@redis:6379/0

  grafana:
    <<: *deps
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_LOG_LEVEL: debug
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
    ports:
      - '10000:3000'
    volumes:
      - ./.docker/grafana/provisioning:/etc/grafana/provisioning

  prometheus:
    <<: *deps
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    pull_policy: missing
    ports:
      - 10001:9090
    volumes:
      - ./.docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--storage.tsdb.path=/prometheus",
        "--web.console.libraries=/etc/prometheus/console_libraries",
        "--web.console.templates=/etc/prometheus/consoles"
      ]
      
  # ref: https://github.com/google/cadvisor/issues/3187
  # this is to scrape docker stats' "metrics"
  cadvisor:
    <<: *deps
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    privileged: true # stops oom warning
    platform: linux/aarch64 # m1/m2 mac
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro